/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simplerts.editor;

import simplerts.map.Terrain;
import java.awt.Canvas;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import javax.swing.JFileChooser;
import javax.swing.tree.DefaultMutableTreeNode;
import simplerts.map.Cell;
import simplerts.Game;
import simplerts.map.Map;
import simplerts.map.MapIO;
import simplerts.gfx.Assets;

/**
 *
 * @author Markus
 */
public class MapEditor extends javax.swing.JFrame {

    Map map;
    Canvas canvas;
    /**
     * Creates new form MapEditor
     */
    public MapEditor() {
        Assets.setup();
        initComponents();
        initCustomComponents();
    }
    
    public static boolean showGrid = true;
    public static JFileChooser fc = new JFileChooser();
    public static Terrain currentTerrain;

    private void initCustomComponents()
    {
        map = new Map(50, 50);
        canvas = new Canvas();
        canvas.setSize(new Dimension(map.getSize()));
        currentTerrain = Assets.darkGrass;
        initTree();
    }
    
    private void initTree()
    {
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("JTree");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Terrain");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode(Assets.grass);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode(Assets.darkGrass);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode(Assets.dirt);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode(Assets.trees);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Resources");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Gold Mine");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Forest");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        scrollPane1 = new java.awt.ScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();
        variations = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenu3 = new javax.swing.JMenu();
        terrainDirt = new javax.swing.JRadioButtonMenuItem();
        terrainGrass = new javax.swing.JRadioButtonMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(jTree1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenu1.setText("File");

        jMenuItem3.setText("New...");
        jMenu1.add(jMenuItem3);

        jMenuItem1.setLabel("Save");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setLabel("Open");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        edit.setText("Edit");

        variations.setText("Set Variations");
        variations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                variationsActionPerformed(evt);
            }
        });
        edit.add(variations);

        jMenuBar1.add(edit);

        jMenu2.setText("View");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Grid");
        jMenu2.add(jCheckBoxMenuItem1);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Terrain");

        buttonGroup1.add(terrainDirt);
        terrainDirt.setSelected(true);
        terrainDirt.setText("Dirt");
        terrainDirt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terrainDirtActionPerformed(evt);
            }
        });
        jMenu3.add(terrainDirt);

        buttonGroup1.add(terrainGrass);
        terrainGrass.setText("Grass");
        terrainGrass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terrainGrassActionPerformed(evt);
            }
        });
        jMenu3.add(terrainGrass);

        jMenuItem4.setText("Tree");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(scrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        int result = fc.showSaveDialog(this);
        if(result == JFileChooser.APPROVE_OPTION)
        {
            MapIO.saveMap(fc.getSelectedFile(), map);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        int result = fc.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION)
        {
            map = MapIO.loadMap(fc.getSelectedFile());
            canvas.setSize(map.getSize());
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void variationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_variationsActionPerformed
        for(Cell[] rows : map.getCells())
        {
            for(Cell cell : rows)
            {
                cell.variate();
            }
        }
    }//GEN-LAST:event_variationsActionPerformed

    private void terrainGrassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terrainGrassActionPerformed
        currentTerrain = Assets.grass;
    }//GEN-LAST:event_terrainGrassActionPerformed

    private void terrainDirtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terrainDirtActionPerformed
        currentTerrain = Assets.dirt;
    }//GEN-LAST:event_terrainDirtActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        currentTerrain = Assets.trees;
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            MapEditor e = new MapEditor();
            Canvas canvas1 = e.canvas;
            e.scrollPane1.add(canvas1);
            EditorMouseListener ml = new EditorMouseListener();
            EditorMouseMotionListener mml = new EditorMouseMotionListener();
            canvas1.addMouseListener(ml);
            canvas1.addMouseMotionListener(mml);
            e.setVisible(true);
            Thread thread = new Thread(new Runnable() {
                public void run() {
                    canvas1.setSize(e.map.getSize());
                    canvas1.createBufferStrategy(3);
                    BufferStrategy bs;
                    Graphics g;
                    while (true) {
                        if(ml.isMouseDown)
                        {
                            editorClick(mml, e);
                        }
                        bs = canvas1.getBufferStrategy();
                        g = bs.getDrawGraphics();
                        e.map.renderMapEditor(g);
                        if(e.jCheckBoxMenuItem1.getState())
                            e.map.renderGrid(g, 0, 0);
                        bs.show();
                        g.dispose();
                    }
                }
            });
            thread.start();
        });
    }
    
    public static void maskMap(Map map, int startX, int startY)
    {
        Cell[][] cells = map.getCells();
        Terrain terrain;
        for(int y = startY-1; y < startY+3; y++)
        {
            for(int x = startX-1; x < startX+3; x++)
            {
                int getTile = 0;
                if(y >= 0 && x >= 0 && y < cells[0].length && x < cells.length && cells[x][y].getTerrain() != Assets.grass)
                {
                    terrain = cells[x][y].getTerrain();
                    if((y-1) >= 0 && cells[x][y-1].getTerrain() == cells[x][y].getTerrain())
                        getTile += 1;
                    if((x+1) < cells.length && cells[x+1][y].getTerrain() == cells[x][y].getTerrain())
                        getTile += 2;
                    if((y+1) < cells[0].length && cells[x][y+1].getTerrain() == cells[x][y].getTerrain())
                        getTile += 4;
                    if((x-1) >= 0 && cells[x-1][y].getTerrain() == cells[x][y].getTerrain())
                        getTile += 8;
                    
                    cells[x][y].setTile(terrain.terrainSquare[getTile]);
                    
                    if(getTile == 15)
                    {
                        boolean NE = false, SE = false, SW = false, NW = false;
                        if((y-1) >= 0 && (x+1) < cells.length && cells[x+1][y-1].getTerrain() == cells[x][y].getTerrain())
                            NE = true;
                        if((x+1) < cells.length && (y+1) < cells[0].length && cells[x+1][y+1].getTerrain() == cells[x][y].getTerrain())
                            SE = true;
                        if((y+1) < cells[0].length && (x-1) >= 0 && cells[x-1][y+1].getTerrain() == cells[x][y].getTerrain())
                            SW = true;
                        if((x-1) >= 0 && (y-1) >= 0 && cells[x-1][y-1].getTerrain() == cells[x][y].getTerrain())
                            NW = true;
                        
                        if(NE && SE && SW && NW)
                            continue;
                        if(NE && SE && SW)
                            cells[x][y].setTile(terrain.getSquare()[18]);
                        if(SE && SW && NW)                         
                            cells[x][y].setTile(terrain.getSquare()[19]);
                        if(SW && NW && NE)
                            cells[x][y].setTile(terrain.getSquare()[20]);
                        if(NW && NE && SE)
                            cells[x][y].setTile(terrain.getSquare()[21]);
                        if(NW && SE && !NE && !SW)
                            cells[x][y].setTile(terrain.getSquare()[16]);
                        if(NE && SW && !NW && !SE)
                            cells[x][y].setTile(terrain.getSquare()[17]);
                            
                    }
                    System.out.println(terrain.terrainSquare[getTile] + " " + getTile);
                }
            }
        }
    }
    
    public static void editorClick(EditorMouseMotionListener mml, MapEditor e)
    {
        if((e.jTree1.getSelectionPath()) != null)
        {
            DefaultMutableTreeNode selected = (DefaultMutableTreeNode)e.jTree1.getSelectionPath().getLastPathComponent();
            if(selected.isLeaf() && selected.getParent().toString().equals("Terrain"))
            {
                for(int i = mml.posX / Game.CELLSIZE; i < mml.posX/Game.CELLSIZE + 2; i++)
                    {
                        for(int j = mml.posY / Game.CELLSIZE; j < mml.posY/Game.CELLSIZE + 2; j++)
                        {
                            if(i >= 0 && i < e.map.getCells().length && j >= 0 && j < e.map.getCells()[0].length)
                            {
                                Cell cell = e.map.getCells()[i][j];
                                cell.setTerrain(((Terrain)selected.getUserObject()));
                            }
                        }
                    }
                    maskMap(e.map, mml.posX/Game.CELLSIZE, mml.posY/Game.CELLSIZE);            
            }            
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenu edit;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    private java.awt.ScrollPane scrollPane1;
    private javax.swing.JRadioButtonMenuItem terrainDirt;
    private javax.swing.JRadioButtonMenuItem terrainGrass;
    private javax.swing.JMenuItem variations;
    // End of variables declaration//GEN-END:variables
}
